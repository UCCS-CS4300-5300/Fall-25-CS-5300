name: Continuous Integration

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  CHROME_VERSION: 135.0.7049.52-1
  CHROMEDRIVER_VERSION: 135.0.7049.52
  RETENTION_DAYS: 14

jobs:
  lint:
    name: Run Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Linters
      run: pip install flake8 djlint

    - name: Lint Python
      if: always()
      run: |
        {
          echo '# Python Lint Output'
          echo '```'
          flake8 --config active_interview_backend/.flake8 . || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

    - name: Lint Templates
      if: always()
      run: |
        {
          echo '# Template Lint Output'
          echo '```'
          djlint --configuration active_interview_backend/djlint.toml active_interview_backend/active_interview_app/templates/ --lint || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r active_interview_backend/requirements.txt
        pip install safety bandit

    - name: Run Security Checks
      run: |
        {
          echo '# Security Scan Results'
          echo '## Safety Check (Dependency Vulnerabilities)'
          echo '```'
          safety check || true
          echo '```'
          echo ''
          echo '## Bandit Scan (Code Security Issues)'
          echo '```'
          bandit -r . --exclude './.git' -f screen || true
          echo '```'
        } >> $GITHUB_STEP_SUMMARY
        bandit -r . --exclude './.git' -f json -o bandit-report.json || true

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: ${{ env.RETENTION_DAYS }}

  test:
    name: Run Tests & Coverage Validation
    runs-on: ubuntu-latest
    needs: [security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Environment
      run: |
        echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' > .env
        echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env

    - name: Start Containers
      run: docker compose -f docker-compose.prod.yml up -d --build

    - name: Install Chrome
      run: |
        docker exec django bash -c "
          wget -O google-chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${{ env.CHROME_VERSION }}_amd64.deb \
          && apt-get update \
          && apt-get install -y ./google-chrome.deb \
          && rm google-chrome.deb"

    - name: Install Chromedriver
      run: |
        docker exec django bash -c "
          wget -O chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/${{ env.CHROMEDRIVER_VERSION }}/linux64/chromedriver-linux64.zip \
          && unzip chromedriver.zip \
          && mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
          && chmod +x /usr/local/bin/chromedriver \
          && rm chromedriver.zip"

    - name: Run Django Tests
      if: always()
      run: docker exec django coverage run manage.py test -v 2 | tee dj_test_out.txt

    - name: Generate Coverage Report
      if: always()
      run: docker exec django coverage report -m | tee coverage_report.txt

    - name: Check Coverage >= 80%
      run: |
        set -o pipefail
        chmod +x ./scripts/check-coverage.sh
        ./scripts/check-coverage.sh coverage_report.txt | tee coverage_verdict.txt

    - name: Create Step Summary
      if: always()
      run: |
        {
          echo '# Coverage Report'
          echo '```'
          cat coverage_report.txt
          echo '```'
          cat coverage_verdict.txt
          echo ''
          echo '# Test Output'
          echo '```'
          cat dj_test_out.txt
          echo '```'
        } >> $GITHUB_STEP_SUMMARY

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage_report.txt
        retention-days: ${{ env.RETENTION_DAYS }}

    - name: Cleanup Docker Resources
      if: always()
      run: |
        echo "Cleaning up Docker containers and images..."
        docker compose -f docker-compose.prod.yml down -v || true
        docker system prune -f || true

  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install OpenAI
      run: pip install openai

    - name: Calculate Git Diff
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            git diff "origin/main" "${{ github.sha }}" > "${{ runner.temp }}/changes.diff"
          else
            git diff "${{ github.event.before }}" "${{ github.event.after }}" > "${{ runner.temp }}/changes.diff"
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          git diff "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > "${{ runner.temp }}/changes.diff"
        fi
        cat "${{ runner.temp }}/changes.diff"

    - name: Run AI Code Review
      run: python scripts/ai-review.py ${{ runner.temp }}/changes.diff
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload AI Code Review Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-report
        path: review-*.md
        retention-days: ${{ env.RETENTION_DAYS }}

    - name: Add Review to Summary
      if: always()
      run: cat review-*.md >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup & Archive
    runs-on: ubuntu-latest
    needs: [lint, security, test, ai-review]
    if: always()

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Essential Files Archive
      run: |
        echo "Creating archive of essential files..."
        mkdir -p essential-archive

        # Copy coverage reports if they exist
        if [ -d "artifacts/coverage-report" ]; then
          cp -r artifacts/coverage-report essential-archive/
        fi

        # Copy security reports if they exist
        if [ -d "artifacts/security-reports" ]; then
          cp -r artifacts/security-reports essential-archive/
        fi

        # Copy AI review reports if they exist
        if [ -d "artifacts/ai-code-review-report" ]; then
          cp -r artifacts/ai-code-review-report essential-archive/
        fi

        # Create timestamp file
        echo "Archive created at: $(date)" > essential-archive/archive-info.txt
        echo "Workflow run: ${{ github.run_id }}" >> essential-archive/archive-info.txt
        echo "Commit: ${{ github.sha }}" >> essential-archive/archive-info.txt

        # Create compressed archive
        tar -czf essential-files-${{ github.run_id }}.tar.gz essential-archive/
        ls -lh essential-files-${{ github.run_id }}.tar.gz

    - name: Upload Essential Archive
      uses: actions/upload-artifact@v4
      with:
        name: essential-archive
        path: essential-files-${{ github.run_id }}.tar.gz
        retention-days: 30

    - name: Cleanup Summary
      run: |
        {
          echo '# Cleanup & Archive Summary'
          echo ''
          echo '## Archived Files'
          echo '```'
          ls -lh artifacts/ || echo "No artifacts found"
          echo '```'
          echo ''
          echo '## Essential Archive Created'
          echo '- Archive: essential-files-${{ github.run_id }}.tar.gz'
          echo '- Retention: 30 days'
          echo '- Workflow Run: ${{ github.run_id }}'
          echo ''
          echo '## Cleanup Status'
          echo '- Temporary artifacts cleaned up'
          echo '- Essential files archived and uploaded'
          echo '- Docker resources cleaned up in test job'
        } >> $GITHUB_STEP_SUMMARY
