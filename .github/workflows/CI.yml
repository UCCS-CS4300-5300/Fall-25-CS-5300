name: Continuous Integration Workflow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  aireview:
    name: AI Code Review
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Infinite fetch depth
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          # cache: 'pip'
          
      - name: Install OpenAI
        run: pip install openai

      - name: Calculate Git Diff
        id: git_diff
        # The following bash is script is (mostly) generated by chatgpt
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              # New branch; compare against the default branch
              BASE_BRANCH="main" # Adjust if your default branch has a different name
              git diff "origin/${BASE_BRANCH}" "${GITHUB_SHA}" > "${RUNNER_TEMP}/changes.diff"
            else
              git diff "${{ github.event.before }}" "${{ github.event.after }}" > "${{ runner.temp }}/changes.diff"
            fi
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            git diff "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > "${{ runner.temp }}/changes.diff"
          fi;
          cat "${RUNNER_TEMP}/changes.diff"
      
      - name: Run AI Code Review
        run: |
          python scripts/ai-review.py ${{ runner.temp }}/changes.diff
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload AI Code Review Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-review-report
          path: review-*.md
          retention-days: 14

      - name: Adding review markdown to action
        if: always()
        run: cat review-*.md >> $GITHUB_STEP_SUMMARY


  citester:
    name: CI Testing

    runs-on: ubuntu-latest

    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Set up pseudo-display
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional

      # - name: Setup Chrome
      #   uses: browser-actions/setup-chrome@v1
      #   with:
      #     install-dependencies: true
      #     install-chromedriver: true

      # - name: Check chrome
      #   run: chrome --version

      # - name: Install Chrome dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libnss3 libgconf-2-4 libxi6 libgdk-pixbuf2.0-0 libxrandr2 libasound2

      - name: Configure Environment
        run: |
          echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' > .env;
          echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env;

      - name: Start Containers
        run: |
          set -o pipefail;
          docker compose -f docker-compose.prod.yml up -d --build

      - name: Run Django Tests
        if: always()
        run: |
          set -o pipefail;
          docker exec django coverage run manage.py test -v 2 | tee dj_test_out.txt;

      - name: Run Coverage Report
        if: always()
        run: |
          set -o pipefail;
          docker exec django coverage report -m | tee coverage_report.txt;

      - name: Check Coverage >= 80%
        run: |
          set -o pipefail;
          chmod +x ./scripts/check-coverage.sh;
          ./scripts/check-coverage.sh coverage_report.txt | tee coverage_verdict.txt

      - name: Create Step Summary
        if: always()
        run: |
          echo -e '# Coverage Report\n```' >> $GITHUB_STEP_SUMMARY;
          cat coverage_report.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY;
          cat coverage_verdict.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n# Test Output\n```' >> $GITHUB_STEP_SUMMARY;
          cat dj_test_out.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report.txt
          retention-days: 14
       
          
  cilinter:
    name: CI Django Linter
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          # cache: 'pip'

      - name: Setup Linters
        run: pip install flake8 djlint

      # - name: Configure Shell
      #   run: |
      #     set -o pipefail # make the pipe exist status carry non-zero values
        
      - name: Lint Python
        if: always()
        run: |
          echo -e '# Python Lint Ouput\n```' >> $GITHUB_STEP_SUMMARY;
          flake8 active_interview_backend/ | tee -a $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY

      - name: Lint Templates
        if: always()
        run: |
          echo -e '# Template Lint Ouput\n```' >> $GITHUB_STEP_SUMMARY;
          djlint active_interview_backend/active_interview_app/templates/ --lint | tee -a $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY

