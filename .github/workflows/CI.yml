name: Continuous Integration

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  PYTHON_VERSION: '3.13'
  CHROME_VERSION: 135.0.7049.52-1
  CHROMEDRIVER_VERSION: 135.0.7049.52
  RETENTION_DAYS: 14

jobs:
  test:
    name: Run Tests & Coverage Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Environment
      run: |
        echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' > .env
        echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env

    - name: Start Containers
      run: docker compose -f docker-compose.prod.yml up -d --build

    - name: Install Chrome
      run: |
        docker exec django bash -c "
          wget -O google-chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${{ env.CHROME_VERSION }}_amd64.deb \
          && apt-get update \
          && apt-get install -y ./google-chrome.deb \
          && rm google-chrome.deb"

    - name: Install Chromedriver
      run: |
        docker exec django bash -c "
          wget -O chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/${{ env.CHROMEDRIVER_VERSION }}/linux64/chromedriver-linux64.zip \
          && unzip chromedriver.zip \
          && mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
          && chmod +x /usr/local/bin/chromedriver \
          && rm chromedriver.zip"

    - name: Run Django Tests
      if: always()
      run: docker exec django coverage run manage.py test -v 2 | tee dj_test_out.txt

    - name: Generate Coverage Report
      if: always()
      run: docker exec django coverage report -m | tee coverage_report.txt

    - name: Check Coverage >= 80%
      run: |
        set -o pipefail
        chmod +x ./scripts/check-coverage.sh
        ./scripts/check-coverage.sh coverage_report.txt | tee coverage_verdict.txt

    - name: Create Step Summary
      if: always()
      run: |
        {
          echo '# Coverage Report'
          echo '```'
          cat coverage_report.txt
          echo '```'
          cat coverage_verdict.txt
          echo ''
          echo '# Test Output'
          echo '```'
          cat dj_test_out.txt
          echo '```'
        } >> $GITHUB_STEP_SUMMARY

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage_report.txt
        retention-days: ${{ env.RETENTION_DAYS }}

  lint:
    name: Run Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Linters
      run: pip install flake8 djlint

    - name: Lint Python
      if: always()
      run: |
        {
          echo '# Python Lint Output'
          echo '```'
          flake8 --config active_interview_backend/.flake8 . || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

    - name: Lint Templates
      if: always()
      run: |
        {
          echo '# Template Lint Output'
          echo '```'
          djlint --configuration active_interview_backend/djlint.toml active_interview_backend/active_interview_app/templates/ --lint || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r active_interview_backend/requirements.txt
        pip install safety bandit

    - name: Run Security Checks
      run: |
        {
          echo '# Security Scan Results'
          echo '## Safety Check'
          echo '```'
          safety check || true
          echo '```'
          echo ''
          echo '## Bandit Scan'
          echo '```'
          bandit -r active_interview_backend/ -f screen || true
          echo '```'
        } >> $GITHUB_STEP_SUMMARY
        bandit -r active_interview_backend/ -f json -o bandit-report.json || true

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: ${{ env.RETENTION_DAYS }}

  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install OpenAI
      run: pip install openai

    - name: Calculate Git Diff
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            git diff "origin/main" "${{ github.sha }}" > "${{ runner.temp }}/changes.diff"
          else
            git diff "${{ github.event.before }}" "${{ github.event.after }}" > "${{ runner.temp }}/changes.diff"
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          git diff "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > "${{ runner.temp }}/changes.diff"
        fi
        cat "${{ runner.temp }}/changes.diff"

    - name: Run AI Code Review
      run: python scripts/ai-review.py ${{ runner.temp }}/changes.diff
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

<<<<<<< Updated upstream
    - name: Upload AI Code Review Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-report
        path: review-*.md
        retention-days: ${{ env.RETENTION_DAYS }}
=======
  cilinter:
    name: CI Django Linter
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          # cache: 'pip'

      - name: Setup Linters
        run: pip install flake8 djlint

      # - name: Configure Shell
      #   run: |
      #     set -o pipefail # make the pipe exist status carry non-zero values
        
      - name: Lint Python
        if: always()
        run: |
          echo -e '# Python Lint Ouput\n```' >> $GITHUB_STEP_SUMMARY;
          flake8 --config active_interview_backend/.flake8 . | tee -a $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY

      - name: Lint Templates
        if: always()
        run: |
          echo -e '# Template Lint Ouput\n```' >> $GITHUB_STEP_SUMMARY;
          djlint --configuration active_interview_backend/djlint.toml active_interview_backend/active_interview_app/templates/ --lint | tee -a $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY


  citester:
    name: CI Testing

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Environment
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env;
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env;
          cat .env

      - name: Start Containers
        run: |
          set -o pipefail;
          docker compose -f docker-compose.prod.yml up -d --build

      - name: Install Chrome
        run: |
          docker exec django bash -c "
            wget -O google-chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}_amd64.deb \
            && apt-get update \
            && apt-get install -y ./google-chrome.deb \
            && rm google-chrome.deb"
        env:
          CHROME_VERSION: 135.0.7049.52-1

      - name: Install Chromedriver
        run: |
          docker exec django bash -c "
            wget -O chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip \
            && unzip chromedriver.zip \
            && mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
            && chmod +x /usr/local/bin/chromedriver \
            && rm chromedriver.zip"
        env:
          CHROMEDRIVER_VERSION: 135.0.7049.52

      - name: Debug Environment
        run: |
          docker exec django bash -c "echo DJANGO_SECRET_KEY=\$DJANGO_SECRET_KEY"

      - name: Run Django Tests
        if: always()
        run: |
          set -o pipefail;
          docker exec django bash -c "coverage run manage.py test -v 2" | tee dj_test_out.txt;

      - name: Run Coverage Report
        if: always()
        run: |
          set -o pipefail;
          docker exec django coverage report -m | tee coverage_report.txt;

      - name: Check Coverage >= 79%
        run: |
          set -o pipefail;
          chmod +x ./scripts/check-coverage.sh;
          ./scripts/check-coverage.sh coverage_report.txt | tee coverage_verdict.txt

      - name: Create Step Summary
        if: always()
        run: |
          echo -e '# Coverage Report\n```' >> $GITHUB_STEP_SUMMARY;
          cat coverage_report.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY;
          cat coverage_verdict.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n# Test Output\n```' >> $GITHUB_STEP_SUMMARY;
          cat dj_test_out.txt >> $GITHUB_STEP_SUMMARY;
          echo -e '\n```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report.txt
          retention-days: 14
>>>>>>> Stashed changes

    - name: Add Review to Summary
      if: always()
      run: cat review-*.md >> $GITHUB_STEP_SUMMARY
