name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  CHROME_VERSION: 135.0.7049.52-1
  CHROMEDRIVER_VERSION: 135.0.7049.52
  RETENTION_DAYS: 14

jobs:
  lint:
    name: Run Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Linters
      run: pip install flake8 djlint

    - name: Lint Python
      if: always()
      run: |
        {
          echo '# Python Lint Output'
          echo '```'
          flake8 --config active_interview_backend/.flake8 . || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

    - name: Lint Templates
      if: always()
      run: |
        {
          echo '# Template Lint Output'
          echo '```'
          djlint --configuration active_interview_backend/djlint.toml active_interview_backend/active_interview_app/templates/ --lint || true
          echo '```'
        } | tee -a $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r active_interview_backend/requirements.txt
        pip install safety bandit

    - name: Run Security Checks
      run: |
        {
          echo '# Security Scan Results'
          echo '## Safety Check (Dependency Vulnerabilities)'
          echo '```'
          safety check || true
          echo '```'
          echo ''
          echo '## Bandit Scan (Code Security Issues)'
          echo '```'
          bandit -r . --exclude './.git' -f screen || true
          echo '```'
        } >> $GITHUB_STEP_SUMMARY
        bandit -r . --exclude './.git' -f json -o bandit-report.json || true

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: ${{ env.RETENTION_DAYS }}

  test:
    name: Run Tests & Coverage Validation
    runs-on: ubuntu-latest
    needs: [security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Environment
      run: |
        echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' > .env
        echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('active_interview_backend/Dockerfile', 'active_interview_backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image with cache
      run: |
        docker buildx build \
          --target ci \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --load \
          -t fall-25-cs-5300-backend \
          active_interview_backend

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Start Containers
      run: docker compose -f docker-compose.prod.yml up -d --no-build

    - name: Wait for Container to be Ready
      run: |
        echo "Waiting for django container to be ready..."
        sleep 5
        docker ps | grep django || (echo "Container not running!" && docker logs django && exit 1)

    - name: Ensure Static Files Collected
      run: docker exec django python manage.py collectstatic --no-input

    - name: Run Django Tests
      if: always()
      run: |
        set -o pipefail
        docker exec django coverage run manage.py test -v 2 | tee dj_test_out.txt
        TEST_EXIT_CODE=$?
        echo $TEST_EXIT_CODE > test_exit_code.txt
        exit 0  # Don't fail yet, let other steps run

    - name: Display Test Results Summary
      if: always()
      run: |
        # Read the exit code
        if [ -f test_exit_code.txt ]; then
          EXIT_CODE=$(cat test_exit_code.txt)
        else
          EXIT_CODE="unknown"
        fi

        echo "========================================="
        echo "TEST RESULTS SUMMARY"
        echo "========================================="
        echo ""
        echo "Exit Code: $EXIT_CODE"
        echo ""

        # Extract and display test summary
        grep -E "Ran [0-9]+ tests? in" dj_test_out.txt || echo "No test summary found"
        grep -E "^(OK|FAILED)" dj_test_out.txt || echo "Unknown result"
        echo ""

        # Count errors and failures
        ERROR_COUNT=$(grep -c "^ERROR:" dj_test_out.txt || echo "0")
        FAIL_COUNT=$(grep -c "^FAIL:" dj_test_out.txt || echo "0")

        echo "Errors: $ERROR_COUNT"
        echo "Failures: $FAIL_COUNT"
        echo ""

        # Show list of failed tests if any
        if [ "$EXIT_CODE" -ne 0 ] 2>/dev/null; then
          echo "❌ TESTS FAILED"
          echo "========================================="
          echo "FAILED TESTS:"
          echo "========================================="
          grep -E "^(ERROR|FAIL):" dj_test_out.txt || echo "No errors or failures found"
        else
          echo "✅ ALL TESTS PASSED!"
        fi
        echo ""
        echo "========================================="

    - name: Generate Coverage Report
      if: always()
      run: docker exec django coverage report -m | tee coverage_report.txt

    - name: Check Coverage >= 80%
      run: |
        set -o pipefail
        chmod +x ./scripts/check-coverage.sh
        ./scripts/check-coverage.sh coverage_report.txt | tee coverage_verdict.txt

    - name: Create Step Summary
      if: always()
      run: |
        {
          echo '# Coverage Report'
          echo '```'
          cat coverage_report.txt
          echo '```'
          cat coverage_verdict.txt
          echo ''
          echo '# Test Output'
          echo '```'
          cat dj_test_out.txt
          echo '```'
        } >> $GITHUB_STEP_SUMMARY

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage_report.txt
        retention-days: ${{ env.RETENTION_DAYS }}

    - name: Cleanup Docker Resources
      if: always()
      run: |
        echo "Cleaning up Docker containers and images..."
        docker compose -f docker-compose.prod.yml down -v || true
        docker system prune -f || true

    - name: Fail if Tests Failed
      if: always()
      run: |
        if [ -f test_exit_code.txt ]; then
          EXIT_CODE=$(cat test_exit_code.txt)
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "❌ Tests failed with exit code $EXIT_CODE"
            exit 1
          else
            echo "✅ All tests passed!"
          fi
        else
          echo "⚠️ No test exit code found, assuming failure"
          exit 1
        fi

  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install OpenAI
      run: pip install openai

    - name: Calculate Git Diff
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            git diff "origin/main" "${{ github.sha }}" > "${{ runner.temp }}/changes.diff"
          else
            git diff "${{ github.event.before }}" "${{ github.event.after }}" > "${{ runner.temp }}/changes.diff"
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          git diff "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > "${{ runner.temp }}/changes.diff"
        fi
        cat "${{ runner.temp }}/changes.diff"

    - name: Run AI Code Review
      run: python scripts/ai-review.py ${{ runner.temp }}/changes.diff
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload AI Code Review Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-report
        path: review-*.md
        retention-days: ${{ env.RETENTION_DAYS }}


    - name: Post AI Report PR Comment
      if: github.event_name == 'pull_request'
      uses: mshick/add-pr-comment@v2
      with: 
        name: ai-code-review-report
        message-path: review-*.md

    - name: Add Review to Summary
      if: always()
      run: cat review-*.md >> $GITHUB_STEP_SUMMARY

  loc-metrics:
    name: Lines of Code Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate Git Diff
      run: |
        # Calculate diff from the previous commit to current for the merge
        if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
          # First push to branch - compare against HEAD~1
          git diff "HEAD~1" "${{ github.sha }}" > "${{ runner.temp }}/changes.diff"
        else
          # Normal merge - compare before and after
          git diff "${{ github.event.before }}" "${{ github.event.after }}" > "${{ runner.temp }}/changes.diff"
        fi

    - name: Calculate LOC Metrics
      run: |
        DIFF_FILE="${{ runner.temp }}/changes.diff"

        # Count lines added (lines starting with + but not +++)
        LINES_ADDED=$(grep -E '^\+[^+]' "$DIFF_FILE" | wc -l || echo "0")

        # Count lines removed/changed (lines starting with - but not ---)
        LINES_REMOVED=$(grep -E '^\-[^-]' "$DIFF_FILE" | wc -l || echo "0")

        # Calculate net change
        NET_CHANGE=$((LINES_ADDED - LINES_REMOVED))

        # Save metrics to file
        {
          echo "LINES_ADDED=$LINES_ADDED"
          echo "LINES_REMOVED=$LINES_REMOVED"
          echo "NET_CHANGE=$NET_CHANGE"
        } > "${{ runner.temp }}/loc_metrics.txt"

        # Display metrics
        cat "${{ runner.temp }}/loc_metrics.txt"

    - name: Create LOC Metrics Summary
      if: always()
      run: |
        source "${{ runner.temp }}/loc_metrics.txt"

        {
          echo '# Lines of Code Metrics'
          echo ''
          echo '## Summary'
          echo "- **Lines Added:** $LINES_ADDED"
          echo "- **Lines Changed/Removed:** $LINES_REMOVED"
          echo "- **Net Change:** $NET_CHANGE"
          echo ''
          echo '## Details'
          if [ $NET_CHANGE -gt 0 ]; then
            echo "✅ Net addition of $NET_CHANGE lines"
          elif [ $NET_CHANGE -lt 0 ]; then
            echo "♻️ Net reduction of $((NET_CHANGE * -1)) lines"
          else
            echo "➖ No net change in lines of code"
          fi
          echo ''
          echo '---'
          echo '*Metrics calculated from changes merged into main*'
        } >> $GITHUB_STEP_SUMMARY

    - name: Upload LOC Metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: loc-metrics
        path: ${{ runner.temp }}/loc_metrics.txt
        retention-days: ${{ env.RETENTION_DAYS }}

  cleanup:
    name: Cleanup & Archive
    runs-on: ubuntu-latest
    needs: [lint, security, test, ai-review, loc-metrics]
    if: always()

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Essential Files Archive
      run: |
        echo "Creating archive of essential files..."
        mkdir -p essential-archive

        # Copy coverage reports if they exist
        if [ -d "artifacts/coverage-report" ]; then
          cp -r artifacts/coverage-report essential-archive/
        fi

        # Copy security reports if they exist
        if [ -d "artifacts/security-reports" ]; then
          cp -r artifacts/security-reports essential-archive/
        fi

        # Copy AI review reports if they exist
        if [ -d "artifacts/ai-code-review-report" ]; then
          cp -r artifacts/ai-code-review-report essential-archive/
        fi

        # Copy LOC metrics if they exist
        if [ -d "artifacts/loc-metrics" ]; then
          cp -r artifacts/loc-metrics essential-archive/
        fi

        # Create timestamp file
        echo "Archive created at: $(date)" > essential-archive/archive-info.txt
        echo "Workflow run: ${{ github.run_id }}" >> essential-archive/archive-info.txt
        echo "Commit: ${{ github.sha }}" >> essential-archive/archive-info.txt

        # Create compressed archive
        tar -czf essential-files-${{ github.run_id }}.tar.gz essential-archive/
        ls -lh essential-files-${{ github.run_id }}.tar.gz

    - name: Upload Essential Archive
      uses: actions/upload-artifact@v4
      with:
        name: essential-archive
        path: essential-files-${{ github.run_id }}.tar.gz
        retention-days: 30

    - name: Cleanup Summary
      run: |
        {
          echo '# Cleanup & Archive Summary'
          echo ''
          echo '## Archived Files'
          echo '```'
          ls -lh artifacts/ || echo "No artifacts found"
          echo '```'
          echo ''
          echo '## Essential Archive Created'
          echo '- Archive: essential-files-${{ github.run_id }}.tar.gz'
          echo '- Retention: 30 days'
          echo '- Workflow Run: ${{ github.run_id }}'
          echo ''
          echo '## Cleanup Status'
          echo '- Temporary artifacts cleaned up'
          echo '- Essential files archived and uploaded'
          echo '- Docker resources cleaned up in test job'
        } >> $GITHUB_STEP_SUMMARY
